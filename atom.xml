<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DD&#39;echo</title>
  <subtitle>the quieter you become, the more you are able to hear.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="mark.z-dd.net/"/>
  <updated>2017-05-07T05:41:48.478Z</updated>
  <id>mark.z-dd.net/</id>
  
  <author>
    <name>shell</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="mark.z-dd.net/2017/05/07/hello-hexo/"/>
    <id>mark.z-dd.net/2017/05/07/hello-hexo/</id>
    <published>2017-05-07T02:57:29.013Z</published>
    <updated>2017-05-07T05:41:48.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="转战到Hexo，Node-js"><a href="#转战到Hexo，Node-js" class="headerlink" title="转战到Hexo，Node.js !"></a><strong>转战到Hexo，Node.js !</strong></h1><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello ,Hexo !"></a><strong>Hello ,Hexo !</strong></h2><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;转战到Hexo，Node-js&quot;&gt;&lt;a href=&quot;#转战到Hexo，Node-js&quot; class=&quot;headerlink&quot; title=&quot;转战到Hexo，Node.js !&quot;&gt;&lt;/a&gt;&lt;strong&gt;转战到Hexo，Node.js !&lt;/strong&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="hello word" scheme="mark.z-dd.net/tags/hello-word/"/>
    
  </entry>
  
  <entry>
    <title>Kali Rolling版本折腾</title>
    <link href="mark.z-dd.net/2016/03/13/Kali-Rolling%E7%89%88%E6%9C%AC%E6%8A%98%E8%85%BE/"/>
    <id>mark.z-dd.net/2016/03/13/Kali-Rolling版本折腾/</id>
    <published>2016-03-13T13:46:14.000Z</published>
    <updated>2017-05-07T04:20:56.178Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp; 最近有点“脑残”，想把之前自己电脑双系统里的linux-mint换成Kali的rolling版玩玩。</p>
<p><strong>#引导：</strong><br>​    于是开始行动，用win32diskimager将Kali的安装镜像文件写到U盘，分区，安装，和以前装ubuntu，mint都类似，一切都啥问题，到grub安装的时候，我选择了将grub安装到了MBR，系统全部安装后，重启，发现，悲剧了，没有grub的引导选项中win10选择项。终于想起来了，之前装mint的时候是用MBR引导grub(在window下用的easyBCD，很简单)。</p>
<p>然后硬着头皮去研究grub，后面发现了篇类似的文章(<a href="http://www.2cto.com/os/201411/354914.html" target="_blank" rel="external">http://www.2cto.com/os/201411/354914.html</a>)，然后用里面的方案一就OK了：</p>
<p>在grub的配置文件/boot/grub/grub.cfg添加win10的启动项声明：</p>
<blockquote>
<h3 id="BEGIN-etc-grub-d-30-os-prober"><a href="#BEGIN-etc-grub-d-30-os-prober" class="headerlink" title="BEGIN /etc/grub.d/30_os-prober"></a>BEGIN /etc/grub.d/30_os-prober</h3><p>menuentry &#39;Windows 7 (loader) (on /dev/sda1)&#39; –class windows –class os $menuentry_id_option &#39;osprober-chain-XXX&#39; {<br>insmod part_msdos<br>insmod ntfs<br>set root=&#39;hd0,msdos1&#39;<br>chainloader +1<br>}</p>
<h3 id="END-etc-grub-d-30-os-prober"><a href="#END-etc-grub-d-30-os-prober" class="headerlink" title="END /etc/grub.d/30_os-prober"></a>END /etc/grub.d/30_os-prober</h3></blockquote>
<p>加在### END /etc/grub.d/00_header ###之后。其中的XXX为你的Windows 系统分区的UUID。查看分区UUID的命令：sudo blkid</p>
<p><strong>#安装中文输入法，字体(解决中文乱码):</strong><br>    apt-get install fcitx fcitx-table-wbpy &nbsp;ttf-wqy-microhei ttf-wqy-zenhei<br>手工配置：<br>    im-config</p>
<p><strong>#添加用户（因为Kali默认就是root用户）:</strong><br>    useradd -m -G video,audio,cdrom,sudo -s /bin/bash 用户名<br>    passwd 用户名</p>
<p><strong>#安装多窗口终端：</strong><br>    apt-get install terminator &nbsp; &nbsp;</p>
<p><strong><strong style="white-space: normal;">#</strong>浏览器：</strong><br>    虽然Kali里面的是iceweasel，但是和firefox是同一家族的，所以和之前装mint类似： <a href="http://echo.z-dd.net/post-34.html" target="_blank" rel="external">http://echo.z-dd.net/post-34.html</a>&nbsp; </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp; 最近有点“脑残”，想把之前自己电脑双系统里的linux-mint换成Kali的rolling版玩玩。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#引导：&lt;/strong&gt;&lt;br&gt;​    于是开始行动，用win32diskimager将Kali的安装镜像文件写到U盘，分区
    
    </summary>
    
      <category term="kali" scheme="mark.z-dd.net/categories/kali/"/>
    
    
      <category term="grub" scheme="mark.z-dd.net/tags/grub/"/>
    
  </entry>
  
  <entry>
    <title>初尝Linux mint</title>
    <link href="mark.z-dd.net/2016/03/01/%E5%88%9D%E5%B0%9DLinux-mint/"/>
    <id>mark.z-dd.net/2016/03/01/初尝Linux-mint/</id>
    <published>2016-03-01T13:57:14.000Z</published>
    <updated>2017-04-27T03:59:03.377Z</updated>
    
    <content type="html"><![CDATA[<p>Cinnamon桌面：</p>
<p>1.更新源，改为国内的，更新系统。</p>
<p>2.配置firefox，使用中文版的配置：删除用户目录下的.mozilla，里面就是些配置。下载个中文版的，解压，运行一次，会重新生成一个.mozilla。OK&nbsp;</p>
<p>3.安装显卡驱动：<a href="http://www.binarytides.com/install-nvidia-drivers-linux-mint-16/" target="_blank" rel="external">http://www.binarytides.com/install-nvidia-drivers-linux-mint-16/</a></p>
<p>4.中文输入法，在选项里可以安装</p>
<p>5.翻墙配置（Shadowsocks，见<a href="http://echo.z-dd.net/post-6.html" target="_blank" rel="external">linux常用命令</a>）</p>
<p>清除</p>
<p><img src="/ueditor/php/upload/image/20160301/1456840945362783.png" alt="123.png" title="1456840945362783.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Cinnamon桌面：&lt;/p&gt;
&lt;p&gt;1.更新源，改为国内的，更新系统。&lt;/p&gt;
&lt;p&gt;2.配置firefox，使用中文版的配置：删除用户目录下的.mozilla，里面就是些配置。下载个中文版的，解压，运行一次，会重新生成一个.mozilla。OK&amp;nbsp;&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="Linux" scheme="mark.z-dd.net/categories/Linux/"/>
    
    
      <category term="Shadowsocks" scheme="mark.z-dd.net/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>android上安装kali</title>
    <link href="mark.z-dd.net/2016/01/24/android%E4%B8%8A%E5%AE%89%E8%A3%85kali/"/>
    <id>mark.z-dd.net/2016/01/24/android上安装kali/</id>
    <published>2016-01-24T12:22:06.000Z</published>
    <updated>2017-05-07T03:24:35.964Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;最近公司换新手机了–P8乞丐版，以前的那个就没啥用了（其实早就没用了，一方面质量太差，经常失灵，另一方面带两个手机太麻烦了）。反正放在那闲着也是闲着，于是琢磨着能不能在上面装个linux,后面在网上一查，真的可以哇，于是说干就干。</p>
<p>​    先刷个机，刷得干净清爽点，那个是定制机，里面乱七八糟的太多的太卡了Deploy linux和Busybox都需要root权限，而且。开始装个Deploy linux，感觉就是类似PC上的虚拟机，虚拟化chroot容器。安装好了后面发现在里面安装Linux要依赖Busybox，于是又安了个<a href="https://github.com/meefik/busybox/releases" target="_blank" rel="external">Busybox</a>。一切开始准备Ok，开始傻瓜式安装Kali。注意安装期间千万别断网，否则要重新开始。安装Ok后，用SSH和VNC都可以连上去，感觉还是有点卡哇，毕竟是容器里面的跑的。</p>
<p>&nbsp;&nbsp;2016-01-24&nbsp;20:44:34</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;最近公司换新手机了–P8乞丐版，以前的那个就没啥用了（其实早就没用了，一方面质量太差，经常失灵，另一方面带两个手机太麻烦了）。反正放在那闲着也是闲着，于是琢磨着能不能在上面装个linux,后面在网上一查，真的可以哇，于是说干就干。&lt;/p&gt;
&lt;p&gt;​ 
    
    </summary>
    
      <category term="kali" scheme="mark.z-dd.net/categories/kali/"/>
    
    
      <category term="Android" scheme="mark.z-dd.net/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>vps及相关idea</title>
    <link href="mark.z-dd.net/2016/01/11/vps%E5%8F%8A%E7%9B%B8%E5%85%B3idea/"/>
    <id>mark.z-dd.net/2016/01/11/vps及相关idea/</id>
    <published>2016-01-11T12:55:55.000Z</published>
    <updated>2017-05-07T05:54:43.101Z</updated>
    
    <content type="html"><![CDATA[<p>​    前段时间用几十刀在美国弄了个VPS，玩玩，为啥要用VPS呢？突然间才意识到，不仅可以弄弄linux主机服务器环境，顺便还可以用来架梯子。近段时间想玩玩微信公众平台，然后就想到了自己的博客，把自己的博和微信公众号关联起来，然后又想到VPS，然后又想到了Python，随便再熟悉熟悉Python，话说好久都没碰它了，哈哈。开干！刚刚有这个idea，微信公众平台发布微信web开发者工具今天也发布了！(2016.1.11晚)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    前段时间用几十刀在美国弄了个VPS，玩玩，为啥要用VPS呢？突然间才意识到，不仅可以弄弄linux主机服务器环境，顺便还可以用来架梯子。近段时间想玩玩微信公众平台，然后就想到了自己的博客，把自己的博和微信公众号关联起来，然后又想到VPS，然后又想到了Python，
    
    </summary>
    
      <category term="tools" scheme="mark.z-dd.net/categories/tools/"/>
    
    
      <category term="vps" scheme="mark.z-dd.net/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title>yocto相关</title>
    <link href="mark.z-dd.net/2016/01/05/yocto%E7%9B%B8%E5%85%B3/"/>
    <id>mark.z-dd.net/2016/01/05/yocto相关/</id>
    <published>2016-01-05T09:18:02.000Z</published>
    <updated>2017-05-07T05:46:04.806Z</updated>
    
    <content type="html"><![CDATA[<p>repo:<br>curl <a href="http://php.webtutor.pl/en/wp-content/uploads/2011/09/repo" target="_blank" rel="external">http://php.webtutor.pl/en/wp-content/uploads/2011/09/repo</a> &gt; ~/bin/repo</p>
<p><a href="https://community.freescale.com/docs/DOC-100847#jive_content_id_2__Configuring_the_kernel" target="_blank" rel="external">https://community.freescale.com/docs/DOC-100847#jive_content_id_2__Configuring_the_kernel</a><br>MACHINE=imx6qsabresd source fsl-setup-release.sh -b build-x11 -e x11<br>bitbake -c menuconfig linux-imx<br>bitbake fsl-image-qt5</p>
<p>bitbake -c cleansstate u-boot<br>bitbake -c patch u-boot<br>bitbake -c cleansstate linux-imx<br>bitbake -c cleanall fsl-image-qt5<br>bitbake meta-toolchain-qt5&nbsp; #生成的sdk在 deploy/sdk/，一样先运行环境脚本</p>
<p>bitbake meta-ide-support:生成交叉编译环境脚本<br>source 交叉编译环境脚本<br>查看编译链:<br>echo $CC<br>arm-poky-linux-gnueabi-gcc -v<br>//bitbake meta-toolchain</p>
<p>error:<br>/usr/include/gnu/stubs.h:7:29: fatal error: gnu/stubs-soft.h: No such file or directory 编译器问题</p>
<p>编译好的部署image在/build-x11/tmp/deploy下<br>qmake:/opt/fsl-yocto-bsp/build-x11/tmp/sysroots/x86_64-linux/usr/bin/qt5/<br>/opt/atsama5d44/poky/build-atmel/tmp/sysroots/x86_64-linux/usr/bin/qt5/qmake -o Makefile<br>//make savedefconfig 生成defconfig文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;repo:&lt;br&gt;curl &lt;a href=&quot;http://php.webtutor.pl/en/wp-content/uploads/2011/09/repo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://php.webtutor.pl/e
    
    </summary>
    
      <category term="tools" scheme="mark.z-dd.net/categories/tools/"/>
    
    
      <category term="yocto" scheme="mark.z-dd.net/tags/yocto/"/>
    
  </entry>
  
  <entry>
    <title>Python相关问题Mark！</title>
    <link href="mark.z-dd.net/2016/01/05/Python%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98Mark%EF%BC%81/"/>
    <id>mark.z-dd.net/2016/01/05/Python相关问题Mark！/</id>
    <published>2016-01-05T07:07:06.000Z</published>
    <updated>2017-05-07T04:14:33.632Z</updated>
    
    <content type="html"><![CDATA[<p>//————————————————————————<br>14.9.2 给世成解决在windows下python逐行拷贝sql文件的问题，要以“rb”，二进制的方式打开，不能直接“r”，文件的存储的编码方式的问题。</p>
<p>9.17 python 串口操作<br><a href="http://blog.chinaunix.net/uid-9787595-id-1997667.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-9787595-id-1997667.html</a></p>
<p>//———————————————————————-<br>9.18 python log，&nbsp; wxpython&nbsp; wx.Choice<br>python 模块间，函数间的调用<br><a href="http://www.2cto.com/kf/201212/175349.html" target="_blank" rel="external">http://www.2cto.com/kf/201212/175349.html</a></p>
<p>python 类<br>【Python】TypeError: ’module’ object is not callable 原因分析<br><a href="http://blog.csdn.net/kenkywu/article/details/6743520" target="_blank" rel="external">http://blog.csdn.net/kenkywu/article/details/6743520</a></p>
<p>//———————————————————————-<br>9.24 Python 操作注册表<br><a href="http://www.cnblogs.com/JeffreySun/archive/2010/01/04/1639117.html&amp;nbsp" target="_blank" rel="external">http://www.cnblogs.com/JeffreySun/archive/2010/01/04/1639117.html&amp;nbsp</a>; (_winreg和win32api)</p>
<p>wxpython ComboBox<br>pyhon字符串操作，选择其中部分的字符，转整型<br>Python通过查找注册表，找到COM口，并打开串口，接收数据，OK！！！<br>Python TCP端口监听</p>
<p>//———————————————————————-<br>9.25<br>python pip, easy_install<br>由 Python ??的?????生工具－ jemdoc:<br><a href="http://www.openfoundry.org/en/foss-programs/8709?task=view" target="_blank" rel="external">http://www.openfoundry.org/en/foss-programs/8709?task=view</a></p>
<p>用pelican在github上创建自己的博客!(Python静态网页生成工具pelican)<br><a href="http://x-wei.github.io/pelican_github_blog.html" target="_blank" rel="external">http://x-wei.github.io/pelican_github_blog.html</a><br><a href="http://dengzhp.github.io/hello-pelican.html" target="_blank" rel="external">http://dengzhp.github.io/hello-pelican.html</a></p>
<p>安装后不支持Markdown语法?<br>这个是因为Markdown没有与pelican包一起安装(pelican默认的还是支持rst格式), 安装上Markdown包就行了:install Markdown<br>编写的.md文件除了标签之外必须要有内容，Github必须要同步到仓库的master分支才能创建博客</p>
<p>//———————————————————————-<br>9.26<br>博客生成命令已全部写成批处理命令，并打开GitHub来同步，一键搞定<br>cmd 下xcopy/?，复制目录所有文件到目标文件夹<br>DISQUS_SITENAME 设置Disqus短域名，来绑定Disqus评论插件<br>wxpython编程之 grid(数据表格),布局：BoxSizer&nbsp; ，，TextCtrl</p>
<p>//——————————–<br>10.23<br>python扩展问题”unable to find vcvarsall.bat“的解决<br><a href="http://blog.csdn.net/ren911/article/details/6448696" target="_blank" rel="external">http://blog.csdn.net/ren911/article/details/6448696</a><br>Zbar安装失败</p>
<p>//———————————-<br>10.28<br>不能启动PyQt4uic 解决方法：<br>1.自己调用命令行<br>pyuic4 -o codeFile.py -x yourUIfile.ui<br>2.写一个批处理,每次双击就行了,跟你的源文件放在同一文件夹下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">'.'</span>):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> file.endswith(<span class="string">'.ui'</span>):</span><br><span class="line">            os.system(<span class="string">'pyuic4 -o %s.py -x %s'</span> \</span><br><span class="line">                      % (file.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">0</span>], file))</span><br><span class="line">        <span class="keyword">elif</span> file.endswith(<span class="string">'.qrc'</span>):</span><br><span class="line">         os.system(<span class="string">'pyrcc4 -o %s_rc.py %s'</span> \</span><br><span class="line">                      % (file.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">0</span>], file))</span><br></pre></td></tr></table></figure></p>
<p>3.使用Eric<br>//———————————-<br>Boa Constructor - wxPython GUI Builder </p>
<p>python下处理带空格的路径：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">   cmd1=<span class="string">r'c:\"Program Files\Internet Explorer"\iexplore.exe'</span></span><br><span class="line">   cmd2 = <span class="string">r'copy E:\"Program Files"\"flash magic"\fm.exe 2.exe'</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="comment">#cmd = ' \" \" 带空格的可执行程序 \"  空格 \" 带空格的参数或文件名等\" \" '</span></span><br><span class="line">   <span class="comment">#cmd='\"\"D:\\Program Files\\Microsoft Office\\OFFICE11\\winword.exe\" \"d:\\11.doc\"\"'</span></span><br><span class="line">   <span class="comment">#cmd = '\"\"copy\" \"E:\\Program Files\\flash magic\\fm.exe\"  \"2.exe\"\"'</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">#print os.system(cmd2).read()</span></span><br><span class="line">   <span class="keyword">print</span> os.popen(cmd2).read()</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   main()</span><br></pre></td></tr></table></figure></p>
<p>处理中文路径：<br>filepath=unicode(filepath,’utf8’)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;//————————————————————————&lt;br&gt;14.9.2 给世成解决在windows下python逐行拷贝sql文件的问题，要以“rb”，二进制的方式打开，不能直接“r”，文件的存储的编码方式的问题。&lt;/p&gt;
&lt;p&gt;9.17 python 串口操作&lt;br&gt;&lt;
    
    </summary>
    
      <category term="Python" scheme="mark.z-dd.net/categories/Python/"/>
    
    
      <category term="Python" scheme="mark.z-dd.net/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Centos6 升级python2.6.6--&gt;2.7.6</title>
    <link href="mark.z-dd.net/2016/01/04/Centos6-%E5%8D%87%E7%BA%A7python2-6-6-2-7-6/"/>
    <id>mark.z-dd.net/2016/01/04/Centos6-升级python2-6-6-2-7-6/</id>
    <published>2016-01-04T05:55:55.000Z</published>
    <updated>2017-05-07T05:52:30.388Z</updated>
    
    <content type="html"><![CDATA[<p>​    最近弄了个美国的VPS，因为要用来搭梯子，shadowsocks只支持Centos6，所以莫办法，只能装个Centos6，后来发现里面的python只有2.6.6，所以升级了下：</p>
<blockquote>
<p>1.下源码，解压，配置./configure，编译make，安装make install，默认安装路径：/usr/local/bin/python2.7，没装gcc，编译不了，sudo         yum install gcc-c++<br>2.修改符号链接：<br>​    rm -rf /usr/bin/python<br>​    ln -s /usr/local/bin/python2.7 /usr/bin/python<br>3.yum用的是2.6的，所以升级之后yum不能用，要修改vim /usr/bin/yum，即 #!/usr/bin/python2.6</p>
<p>python -V</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    最近弄了个美国的VPS，因为要用来搭梯子，shadowsocks只支持Centos6，所以莫办法，只能装个Centos6，后来发现里面的python只有2.6.6，所以升级了下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.下源码，解压，配置./configure
    
    </summary>
    
      <category term="centos" scheme="mark.z-dd.net/categories/centos/"/>
    
    
  </entry>
  
  <entry>
    <title>I2C tools工具使用-记录</title>
    <link href="mark.z-dd.net/2015/11/10/I2C-tools%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-%E8%AE%B0%E5%BD%95/"/>
    <id>mark.z-dd.net/2015/11/10/I2C-tools工具使用-记录/</id>
    <published>2015-11-10T09:08:59.000Z</published>
    <updated>2017-05-07T04:11:20.872Z</updated>
    
    <content type="html"><![CDATA[<p>下载编译好 i2c-tools，并将生成的生成i2cdetect,i2cdump,i2cset,i2cget等工具拷贝到目标板中。</p>
<p>使用 ：</p>
<p><strong>1.i2cdetect -l</strong></p>
<pre><code>列举出系统中所有的I2C总线。
</code></pre><p><strong>2.i2cdetect -y -r 0</strong></p>
<pre><code>列举一条I2C总线（以0为例）上的所有设备(UU为使用中，即已经操作过)
</code></pre><p>0&nbsp; 1&nbsp; 2&nbsp; 3&nbsp; 4&nbsp; 5&nbsp; 6&nbsp; 7&nbsp; 8&nbsp; 9&nbsp; a&nbsp; b&nbsp; c&nbsp; d&nbsp; e&nbsp; f<br>00:               – – – – – – – – – – – – –<br>10: – – – – – – – – – – UU – – – – –<br>20: – – – – – – – – – – – – – – – –<br>30: – – – – 34 – – – – – – – – – – –<br>40: – – – – – – – – – – – – – – – –<br>50: – – – – – – – – – – – – – – – –<br>60: – – – – – – – – – – – – – – – –<br>70: – – – – – – – –</p>
<p><strong>3. i2cdump -f -y 0 0x34</strong></p>
<pre><code>读取I2C总线（0）上地址为0x34的设备
</code></pre><p><strong>4. i2cget -f -y 0 0x34 0x28</strong></p>
<pre><code>读取I2C总线（0）上地址为0x34的设备的0x28寄存器
</code></pre><p><strong>5. i2cset -f -y 0 0x34 0x28 0xfb</strong></p>
<pre><code>写I2C总线（0）上地址为0x34的设备的0x28寄存器为0xfb
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下载编译好 i2c-tools，并将生成的生成i2cdetect,i2cdump,i2cset,i2cget等工具拷贝到目标板中。&lt;/p&gt;
&lt;p&gt;使用 ：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.i2cdetect -l&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;列举出系统
    
    </summary>
    
      <category term="tools" scheme="mark.z-dd.net/categories/tools/"/>
    
    
      <category term="I2C" scheme="mark.z-dd.net/tags/I2C/"/>
    
  </entry>
  
  <entry>
    <title>Cubieboard上kali初探</title>
    <link href="mark.z-dd.net/2015/11/04/Cubieboard%E4%B8%8Akali%E5%88%9D%E6%8E%A2/"/>
    <id>mark.z-dd.net/2015/11/04/Cubieboard上kali初探/</id>
    <published>2015-11-04T14:05:12.000Z</published>
    <updated>2017-05-07T04:10:11.347Z</updated>
    
    <content type="html"><![CDATA[<p>​    本人小白一枚，偶遇kali。觉得很不错，想玩玩。于是在手头的Cubieboard上倒腾。</p>
<p>​    开始看到网上有人用第三方的方法制作在Cubieboard跑的kali的镜像，发现很多问题，链接地址失效不可用等等问题。</p>
<p>​    后来突然发现Kali的官网上，ARM版本的Kali居然有Cubieboard的镜像，惊喜万分。下下来刷进了SD卡里，顺利跑起来了。</p>
<p>​    突然发现之前的USB网卡rtl8188eu不能用，于是又开始折腾rtl8188eu的驱动。<br>下了个rtl8188eu驱动源码，发现没有unzip，没有make，gcc。 </p>
<p>开始编译，没有/lib/modules/3.4.10/bulid 的软链接无效，导致找不到路径。</p>
<p>kali默认是没有开启SSH，每次用串口很麻烦，于是就打开了ssh：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.修改/etc/ssh/sshd_config:</span><br><span class="line">	PasswordAuthentication yes</span><br><span class="line">	PermitRootLogin without-password的后面without-password改为yes</span><br><span class="line">保存退出</span><br><span class="line">2.添加自启动：</span><br><span class="line">	update-rc.d ssh enable &amp;nbsp;//开启</span><br><span class="line">	update-rc.d ssh disabled // 关闭</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    本人小白一枚，偶遇kali。觉得很不错，想玩玩。于是在手头的Cubieboard上倒腾。&lt;/p&gt;
&lt;p&gt;​    开始看到网上有人用第三方的方法制作在Cubieboard跑的kali的镜像，发现很多问题，链接地址失效不可用等等问题。&lt;/p&gt;
&lt;p&gt;​    后来突
    
    </summary>
    
      <category term="kali" scheme="mark.z-dd.net/categories/kali/"/>
    
    
      <category term="Cubieboard" scheme="mark.z-dd.net/tags/Cubieboard/"/>
    
  </entry>
  
  <entry>
    <title>wpa_supplicant &amp; iwconfig</title>
    <link href="mark.z-dd.net/2015/10/27/wpa-supplicant-iwconfig/"/>
    <id>mark.z-dd.net/2015/10/27/wpa-supplicant-iwconfig/</id>
    <published>2015-10-27T11:26:56.000Z</published>
    <updated>2017-05-07T04:08:07.778Z</updated>
    
    <content type="html"><![CDATA[<p>###<strong>wpa_supplican</strong></p>
<p>用wpa_passphrase生成最基本的wpa_supplicant配置文件：</p>
<pre><code>wpa_passphrase TPLINK 12345678 |sudo tee -a /etc/wpa_supplicant/wpa_supplicant.conf
</code></pre><p>wpa_supplication.conf的模板如下：</p>
<pre><code>ctrl_interface=/var/run/wpa_supplicant
ctrl_interface_group=wheel
update_config=1
network=
{
    ssid=&quot;xxxx&quot;
    scan_ssid=1
    psk=xxxxxxxxx37bca5cf24a345f514d319211822f568bba28f8f0b74c894e7644
    proto=RSN
    key_mgmt=WPA-PSK
    pairwise=CCMP
    auth_alg=OPEN
}
</code></pre><p>连接命令：</p>
<pre><code>wpa_supplicant -B -d -iwlan0 -c/etc/wpa_supplicant.conf
</code></pre><p>动态获取IP：</p>
<pre><code>dhclient wlan0
</code></pre><p>###<strong>iwconfig</strong></p>
<p>扫描AP节点：<br>    iwlist wlan4 scanning</p>
<p>配置MYSSID：<br>    iwconfig wlan0 essid “myssid”</p>
<p>加密码：<br>    iwconfig wlan0 key s:xxxxx/xxxxxxxxxxxxx（40－bit为5个ASSIC字符，128－bit为13个ASSIC字符，以字符为密钥时，密钥之前需要加s:表示字符）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###&lt;strong&gt;wpa_supplican&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用wpa_passphrase生成最基本的wpa_supplicant配置文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wpa_passphrase TPLINK 12345678 |sudo tee
    
    </summary>
    
      <category term="tools" scheme="mark.z-dd.net/categories/tools/"/>
    
    
      <category term="网络" scheme="mark.z-dd.net/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>openwrt 相关有用的</title>
    <link href="mark.z-dd.net/2015/10/19/openwrt-%E7%9B%B8%E5%85%B3%E6%9C%89%E7%94%A8%E7%9A%84/"/>
    <id>mark.z-dd.net/2015/10/19/openwrt-相关有用的/</id>
    <published>2015-10-19T06:46:54.000Z</published>
    <updated>2017-05-07T03:55:31.363Z</updated>
    
    <content type="html"><![CDATA[<p>config_load等获取config配置文件：</p>
<pre><code>#!/bin/sh /etc/rc.common
# Copyright (C) 2013 NXP Semiconductor
# -s /dev/ttyTX0 -B 115200 --mode=coordinator -6 fd04:bd3:80e8:10::1 -c 15 -I zb0

START=99

PROG=zigbee-jip-daemon

start_zigbee_jip_daemon() {
    local section=&quot;$1&quot;

    config_get_bool ignore &quot;$section&quot; ignore 0
    [ &quot;$ignore&quot; -ne 0 ] &amp;amp;&amp;amp; return 0

    local tty
    config_get tty &quot;${section}&quot; tty
    [ -z $tty ] &amp;amp;&amp;amp; tty=&quot;/dev/ttyUSB0&quot;

    local interface
    config_get interface &quot;${section}&quot; interface

    local baudrate
    config_get baudrate &quot;${section}&quot; baudrate
    [ -z $baudrate ] &amp;amp;&amp;amp; baudrate=&quot;1000000&quot;

    local mode
    config_get mode &quot;${section}&quot; mode

    local borderrouter
    config_get borderrouter &quot;${section}&quot; borderrouter

    local channel
    config_get channel &quot;${section}&quot; channel

    local whitelisting
    config_get whitelisting &quot;${section}&quot; whitelisting

    local args
    args=&quot;-s $tty -B $baudrate --mode=$mode -6 $borderrouter -c $channel&quot;

    if [ $interface ]
    then
        args=&quot;$args -I $interface&quot;
    fi

    if [ $whitelisting -ne 0 ]
    then
        args=&quot;$args --whitelisting&quot;
    fi

    echo &quot;Starting $PROG with arguments: $args&quot;
    /usr/sbin/$PROG $args
}
start () {
    config_load zigbee-jip-daemon
    config_foreach start_zigbee_jip_daemon zigbee-jip-daemon
}
stop () {
    killall $PROG
}
</code></pre><p>log操作：</p>
<pre><code>logread
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;config_load等获取config配置文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh /etc/rc.common
# Copyright (C) 2013 NXP Semiconductor
# -s /dev/ttyTX0 -B 115200 --mod
    
    </summary>
    
      <category term="openwrt" scheme="mark.z-dd.net/categories/openwrt/"/>
    
    
      <category term="openwrt" scheme="mark.z-dd.net/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>hello,echo! hello,world!</title>
    <link href="mark.z-dd.net/2015/10/16/hello-echo/"/>
    <id>mark.z-dd.net/2015/10/16/hello-echo/</id>
    <published>2015-10-16T13:27:20.000Z</published>
    <updated>2017-05-07T05:41:37.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hello-echo-hello-world"><a href="#hello-echo-hello-world" class="headerlink" title="hello,echo! hello,world!"></a>hello,echo! hello,world!</h2><h2 id="DD’echo-echo-z-dd-net"><a href="#DD’echo-echo-z-dd-net" class="headerlink" title="DD’echo: echo.z-dd.net"></a><a href="http://echo.z-dd.net/" target="_blank" rel="external">DD’echo</a>: <a href="">echo.z-dd.net</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hello-echo-hello-world&quot;&gt;&lt;a href=&quot;#hello-echo-hello-world&quot; class=&quot;headerlink&quot; title=&quot;hello,echo! hello,world!&quot;&gt;&lt;/a&gt;hello,echo! hello,
    
    </summary>
    
    
      <category term="hello word" scheme="mark.z-dd.net/tags/hello-word/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--（持续更新中。。。）</title>
    <link href="mark.z-dd.net/2015/02/11/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%E3%80%82%E3%80%82%E3%80%82%EF%BC%89/"/>
    <id>mark.z-dd.net/2015/02/11/Linux常用命令-（持续更新中。。。）/</id>
    <published>2015-02-11T13:12:23.000Z</published>
    <updated>2017-04-27T03:59:03.374Z</updated>
    
    <content type="html"><![CDATA[<p>##<br>    SSH：</p>
<pre><code>http://www.live-in.org/archives/832.html
</code></pre><blockquote>
<p>不指定用户：<br>ssh 192.168.0.11<br>指定用户：<br>ssh -l root 192.168.0.11<br>ssh root@192.168.0.11<br>如果修改过ssh登录端口的可以：<br>ssh -p 12333 192.168.0.11<br>ssh -l root -p 12333 216.230.230.114<br>ssh -p 12333 root@216.230.230.114<br>另外修改配置文件/etc/ssh/sshd_config，可以改ssh登录端口和禁止root登录。改端口可以防止被端口扫描。<br>编辑配置文件：<br>vim /etc/ssh/sshd_config<br>找到#Port 22，去掉注释，修改成一个五位的端口：<br>Port 12333<br>找到#PermitRootLogin yes，去掉注释，修改为：<br>PermitRootLogin no<br>重启sshd服务：<br>service sshd restart<br>退出登陆<br>Exit</p>
</blockquote>
<p>##<br>    查看显卡状态：</p>
<blockquote>
<p>lspci | grep VGA<br>rev ff 表示显卡已经关闭</p>
</blockquote>
<p>##<br>    Mount:</p>
<pre><code>sudo mount -r -t cifs //192.168.12.128/share /mnt/tmp -o username=lierda,password=123456
</code></pre><p><a href="http://tutu.spaces.eepw.com.cn/articles/article/item/70737" target="_blank" rel="external">http://tutu.spaces.eepw.com.cn/articles/article/item/70737</a></p>
<p>##<br>    常用的APT命令参数</p>
<blockquote>
<p>apt-cache search package 搜索包<br>apt-cache show package 获取包的相关信息，如说明、大小、版本等<br>sudo apt-get install package 安装包<br>sudo apt-get install package - - reinstall 重新安装包<br>sudo apt-get -f install 修复安装&quot;-f = ――fix-missing&quot;<br>sudo apt-get remove package 删除包<br>sudo apt-get remove package - - purge 删除包，包括删除配置文件等<br>sudo apt-get update 更新源<br>sudo apt-get upgrade 更新已安装的包<br>sudo apt-get dist-upgrade 升级系统<br>sudo apt-get dselect-upgrade 使用 dselect 升级<br>apt-cache depends package 了解使用依赖<br>apt-cache rdepends package 是查看该包被哪些包依赖<br>sudo apt-get build-dep package 安装相关的编译环境<br>apt-get source package 下载该包的源代码<br>sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包<br>sudo apt-get check 检查是否有损坏的依赖<br>apt-get autoremove    </p>
<p><span style="line-height:1;">apt-cache search package 搜索包</span> </p>
<p><span style="line-height:1;">apt-cache show package 获取包的相关信息</span><span style="line-height:1;"></span></p>
</blockquote>
<p>##<br>    磁盘空间查看：</p>
<pre><code>用df命令查看分区情况 $df -h
</code></pre><p>用du命令查看文件或文件夹的磁盘使用空间:<br>$ du -h –max-depth=1 或 $ du -h –max-depth=0</p>
<p>##<br>    source</p>
<pre><code>source命令也称为“点命令”，也就是一个点符号（.）。source命令通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录
</code></pre><p>##<br>    修改文件或目录用户组和用户</p>
<pre><code>chown [-R] 账号名称:用户组名称 文件或目录
</code></pre><p>##<br>    防火墙</p>
<pre><code>sudo ufw disable 关闭防火墙
</code></pre><p>sudo ufw enable 开启防火墙<br>sudo ufw status 检查防火墙的状态</p>
<p>##<br>    解压：</p>
<pre><code>tar.gz 解压:tar -zxvf 压缩：tar -zcvf
</code></pre><p>tar.bz2 解压:tar -jxvf xx.tar.bz2</p>
<p>##<br>    查找：</p>
<pre><code>find 路径 -name &amp;quot;*log&amp;quot;
</code></pre><p>##<br>    修改网关与指定路由：</p>
<pre><code>修改默认网关：route add default gw 192.168.0.254
</code></pre><p>指定路由：route add -net 192.168.10.0 netmask 255.255.255.0 dev eth0</p>
<p>##<br>    Busybox的tftp命令：</p>
<pre><code>tftp -g -l /usr/APP -r APP 192.168.12.128
</code></pre><p>##<br>        实时监控网络：    </p>
<p>nethogs</p>
<h2 id="安装使用Shadowsocks："><a href="#安装使用Shadowsocks：" class="headerlink" title="安装使用Shadowsocks："></a><span style="font-size: 16px; font-family: &#39;arial black&#39;, &#39;avant garde&#39;;">安装使用Shadowsocks：</span></h2><blockquote>
<p>apt-get&nbsp;install python-pip<br>pip install shadowsocks</p>
<p>sslocal -s server_ip -p server_port &nbsp;-b 127.0.0.1 -l 1080 -k password &nbsp;-t 600 &nbsp;-m aes-256-cfb</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##&lt;br&gt;    SSH：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://www.live-in.org/archives/832.html
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;不指定用户：&lt;br&gt;ssh 192.168.0.11&lt;br&gt;指定用户：&lt;b
    
    </summary>
    
      <category term="linux common" scheme="mark.z-dd.net/categories/linux-common/"/>
    
    
      <category term="linux命令" scheme="mark.z-dd.net/tags/linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu14.04环境配置</title>
    <link href="mark.z-dd.net/2015/01/11/ubuntu14-04%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>mark.z-dd.net/2015/01/11/ubuntu14-04环境配置/</id>
    <published>2015-01-11T13:17:21.000Z</published>
    <updated>2017-04-27T03:59:03.373Z</updated>
    
    <content type="html"><![CDATA[<p>##<br>    1.重启后亮度无法保存</p>
<p>查看本机最大亮度值：cat /sys/class/backlight/XXX/max_brightness（XXX为你的显卡）<br>编辑/etc/rc.local启动初始化文件，在最后一行（exit 0）之前添加：<br>echo 15（你设置的值） &gt; /sys/class/backlight/XXX/brightness（XXX为你的显卡）<br><strong>exit 0</strong>&nbsp;(别忘了)</p>
<p>##<br>    2.休眠后无法启动</p>
<p>Ubuntu 14.04系统下，休眠之后无法启动的问题解决：<br><a href="http://blog.csdn.net/blueheart20/article/details/37995049" target="_blank" rel="external">http://blog.csdn.net/blueheart20/article/details/37995049</a> （与显卡驱动有关）<br>linux学习笔记（7）=》ubuntu挂起后无法唤醒-解决：（缺失laptop_mode）<br><a href="http://blog.sina.com.cn/s/blog_7ec12e960100rfpn.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_7ec12e960100rfpn.html</a> </p>
<p>##<br>    3.鼠标箭头闪烁问题，显卡驱动问题</p>
<p>安装NVIDIA显卡驱动：（bumblebee）—开始使用的方法<br><a href="http://www.jb51.net/os/Ubuntu/84218.html" target="_blank" rel="external">http://www.jb51.net/os/Ubuntu/84218.html</a><br>显卡切换，关闭独显在14.04上没用<br><a href="http://www.douban.com/note/298832176/" target="_blank" rel="external">http://www.douban.com/note/298832176/</a><br>Ubuntu 14.04为Intel/Nvidia双显卡调节亮度:(Prime，比 Bumblebee 成熟)—最终使用方法<br><a href="http://www.mintos.org/config/intel-nvidia-brightness.html" target="_blank" rel="external">http://www.mintos.org/config/intel-nvidia-brightness.html</a><br>sudo apt-get install nvidia-319 nvidia-settings-319 nvidia-prime<br>安装完毕，还要安装一个 Nvidia Prime 双显卡切换指示器，用于在系统托盘中轻点鼠标即可切换显卡，而不必使用命令。在终端中使用如下 PPA 安装：<br>sudo add-apt-repository ppa:nilarimogard/webupd8<br>sudo apt-get update<br>sudo apt-get install prime-indicator<br>想解决亮度及休眠问题–&gt;想安装显卡驱动—》不知道型号—&gt;想用官网的自动检测–&gt;缺少JAVA（TM）–&gt;下载安装了OpenJDK（使用软件中心）–&gt;安装浏览器插件Icedtea（使用软件中心）–&gt;浏览器检测不到插件–&gt;Icedtea不再支持高版本的chrome–&gt;安装其他版本的JAVA</p>
<p>##<br>    安装JAVA：</p>
<p><a href="http://blog.sina.com.cn/s/blog_53a99cf30102v6o4.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_53a99cf30102v6o4.html</a><br>sudo add-apt-repository ppa:webupd8team/java<br>sudo apt-get update<br>sudo apt-get install Oracle-java8-installer<br>设置 Java 8 环境变量：<br>sudo apt-get install oracle-java8-set-default<br>切换为 Java 7 ：<br>sudo update-java-alternatives -s java-7-oracle<br>再切换为 Java 8：<br>sudo update-java-alternatives -s java-8-oracle<br>切换JAVA版本<br>update-alternatives –config java<br>update-alternatives –config javac<br>在ubuntu的chrome中启用java plugin：<br><a href="http://blog.csdn.net/xiajian2010/article/details/10219589" target="_blank" rel="external">http://blog.csdn.net/xiajian2010/article/details/10219589</a> </p>
<p>##<br>    QT安装：</p>
<p><a href="http://www.cnblogs.com/striver-zhu/p/3918275.html" target="_blank" rel="external">http://www.cnblogs.com/striver-zhu/p/3918275.html</a> </p>
<p>##<br>    Samba共享</p>
<p>Ubuntu挂载windows共享文件夹：<br><a href="http://blog.csdn.net/fulinus/article/details/21086581" target="_blank" rel="external">http://blog.csdn.net/fulinus/article/details/21086581</a><br>samba:<br><a href="http://www.cnblogs.com/ouuy/archive/2011/10/24/2223164.html" target="_blank" rel="external">http://www.cnblogs.com/ouuy/archive/2011/10/24/2223164.html</a><br>sudo gedit /etc/samba/smb.conf 新增如下语句:<br>[share]<br>path = /xxx &nbsp;//共享目录<br>available = yes<br>browsealbe = yes<br>public = yes<br>writable = yes<br>read only=yes<br>valid users = xxx//用户名<br>create mask = 0700<br>directory mask = 0700<br>force user = nobody<br>force group = nogroup<br>workgroup = WORKGROUP<br>display charset = UTF-8 //防止windows显示乱码<br>unix charset = UTF-8<br>dos charset = cp936<br>新增登录用户密码<br>sudo touch /etc/samba/smbpasswd<br>sudo smbpasswd -a xxx</p>
<p>##<br>    安装flash插件：</p>
<p>1.Chromium谷歌的开源浏览器将不再支持Netscape浏览器插件API，Adobe公司的Flash将无法正常工作了。然而用户可以使用Pepper Flash Player，这是谷歌浏览器上一款替代Adobe Flash的插件。<br>Ubuntu 14.04及衍生版本用户命令:<br>sudo apt-get update<br>sudo apt-get install chromium-browser<br>sudo apt-get install pepperflashplugin-nonfree<br>sudo update-pepperflashplugin-nonfree –install<br>卸载命令：<br>sudo apt-get remove chromium-browser pepperflashplugin-nonfree<br>2.firefox:sudo apt-get install flashplugin-installer</p>
<p>##<br>    NFS安装时：</p>
<p>注：rpcbind（Ubuntu14.04）就是高版本的portmap<br>注意此时可能会出现：Not starting: portmapper is not running //重启Ubuntu系统后就好了;<br>win7 中使用NFS共享：&nbsp;<a href="http://www.cnblogs.com/itech/archive/2012/06/17/2552514.html" target="_blank" rel="external">http://www.cnblogs.com/itech/archive/2012/06/17/2552514.html</a><br>可以用来测试<br>Cifs取代了smbfs</p>
<p>##<br>    VNC：</p>
<p><span style="font-size:14px;">1.vino-server</span><br><span style="font-size:14px;">运行dconf-editor，注意一定要用当前用户来运行，不能加sudo，依次展开org-&gt;gnome-&gt;desktop-&gt;remote-access</span><span style="font-size:14px;">，这里也可以直接设置远程控制选项，但重要的是将“requre-encryption”去掉</span><span style="font-size:14px;">，但是没有密码,需要点图标设置</span><span style="font-size:14px;">。此方法有点卡，占用带宽太大</span></p>
<p><span style="font-size:14px;">2.vnc4server</span> </p>
<p>##<br>    用户管理：</p>
<p><span style="font-size:14px;">新建用户：useradd，修改密码：passwd，但home目录并没有创建对应的用户文件夹，我们需要添加选项,主动创建用户文件夹和指定shell</span><br>userdel -r xxx&nbsp;&nbsp; &nbsp;<br>useradd xxx -m -s /bin/bash<br><span style="font-size:14px;">note:</span><br><span style="font-size:14px;">useradd username不会在/home下建立一个文件夹username</span><br><span style="font-size:14px;">adduser username会在/home下建立一个文件夹username</span><br><span style="font-size:14px;">useradd -m username跟adduser一样，可以建立一个文件夹username</span> </p>
<p>##<br>    samba：</p>
<p><pre class="prettyprint lang-bsh linenums">sudo&nbsp;apt-get&nbsp;update<br>sudo&nbsp;apt-get&nbsp;install&nbsp;samba&nbsp;samba-common<br>sudo&nbsp;gedit&nbsp;/etc/samba/smb.conf</pre>&gt; max log size = 1000</p>
<blockquote>
<p>security = user<br>[mpushare]<br>comment = mpu_share<br>path = /home/share<br>browseable = yes<br>writable = yes</p>
</blockquote>
<p><span style="font-size:14px;">修改用户及加到smb组： </span></p>
<p><span style="font-size:14px;">sudo smbpasswd -a xxx<br>重启服务：<br></span></p>
<p><span style="font-size:14px;"><br>    sudo service smbd restart</span></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##&lt;br&gt;    1.重启后亮度无法保存&lt;/p&gt;
&lt;p&gt;查看本机最大亮度值：cat /sys/class/backlight/XXX/max_brightness（XXX为你的显卡）&lt;br&gt;编辑/etc/rc.local启动初始化文件，在最后一行（exit 0）之前添加：
    
    </summary>
    
      <category term="Linux" scheme="mark.z-dd.net/categories/Linux/"/>
    
    
      <category term="Ubuntu" scheme="mark.z-dd.net/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>拯救我的Ubuntu14.04（kylin）</title>
    <link href="mark.z-dd.net/2015/01/05/%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84Ubuntu14-04%EF%BC%88kylin%EF%BC%89/"/>
    <id>mark.z-dd.net/2015/01/05/拯救我的Ubuntu14-04（kylin）/</id>
    <published>2015-01-05T13:18:53.000Z</published>
    <updated>2017-05-07T04:44:47.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>双硬盘，双系统（SSD-&gt;win8.1，HDD-&gt;Ubuntu14.04），HDD是原笔记本的硬盘，只有320G，而且本来就不咋地，很大的吱吱声音，速度也很慢很卡。HDD其中120G为Ubuntu，当时挂载分区的时候，根目录分的是50G，装完系统就剩40多G了，Home目录为70G。<br>打算自己开始编译imx6的Android源码，10G多的源码放在根目录下的/mnt，折腾了一天多，终于编译好了一个目标板的。接着没看剩余磁盘大小就编译第二个目标板的，从晚上开始编译，觉得早上应该就差不多了。第二天早上一看，系统提示磁盘空间不足，然后很卡。就用那个优客助手想清理下，结果系统就越来越卡，UI渐渐消失了，系统崩溃了。最后重启结果就进不了系统了，一直停在启动界面。</p>
<h3 id="自己解决步骤："><a href="#自己解决步骤：" class="headerlink" title="自己解决步骤："></a>自己解决步骤：</h3><h4 id="第一次："><a href="#第一次：" class="headerlink" title="第一次："></a>第一次：</h4><p>在停住的启动界面按Esc进入非图形启动界面，发现lightdm&nbsp;display&nbsp;manager&nbsp;fail。Ctrl+Alt+F1&nbsp;由桌面图形模式进命令行模式，命令行中文乱码<br>修改Ubuntu的命令行语言环境：<br>1、修改/etc/default/locale<br>如不存在则新建一个<br>如下：<br>LANG=’en_US’&nbsp;#中文可以用zh_CN<br>LANGUAGE=’en_US:en’&nbsp;#中文可以用zh_CN:zh<br>2、reboot即可<br>locale命令可以列出当前系统所用的所有语言设置<br>查看/var/log/lightdm，发现默认配置都丢失了，查看/etc/lightdm/，果然没了。经过很多种尝试，发现桌面lightdm始终不行，打算重新安装桌面。<br>但发现Apt丢失了（apt-get&nbsp;command&nbsp;not&nbsp;found），幸好dpkg还在，网也能通，打算用dpkg安装apt，找了半天资料，才找到个能下包的地方，小白啊，没办法，安装<a href="http://www.cnblogs.com/huangbangshun/p/4174922.html" target="_blank" rel="external">apt</a>，包:<a href="http://mirrors.163.com/ubuntu/pool/main/a/apt/" target="_blank" rel="external">（apt_1.0.1ubuntu2_amd64）</a></p>
<p>后面用apt安装其他包，又遇到Apt依赖项问题（Ubuntu&nbsp;unmet&nbsp;dependencies），安装任何包都会报依赖项问题，又折腾了半天，找了半天，apt-get&nbsp;dist-upgrade&nbsp;升级系统&nbsp;，sudo&nbsp;apt-get&nbsp;upgrade&nbsp;更新已安装的包&nbsp;，重新安装桌面（ubuntu-desktop），搞定，可以正常了。</p>
<h4 id="第二次："><a href="#第二次：" class="headerlink" title="第二次："></a>第二次：</h4><p>也是用优客助手（类似于win下面的360卫士，可以清理）后，系统又崩溃了。这次更彻底，Apt丢失，它的一些依赖包也丢了，网也不行了，无线网卡没起来，eth幸好敲命令能起来（ipconfig&nbsp;eth0&nbsp;up）。下载依赖包（<a href="http://www.ubuntuupdates.org/" target="_blank" rel="external">http://www.ubuntuupdates.org/</a>&nbsp;），发现依赖包存在版本依赖，折腾半天终于安装好了apt，后面的步骤就同第一次了。</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>越来越能体会命令行的好处了</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>ubuntu&nbsp;lightdm登陆器不能用户登陆解决：<br><a href="http://www.2cto.com/os/201305/213215.html" target="_blank" rel="external">http://www.2cto.com/os/201305/213215.html</a> </p>
<p>ubuntu中apt-get，dpkg与默认路径:<br><a href="http://blog.chinaunix.net/uid-25436678-id-3853747.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-25436678-id-3853747.html</a> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i &lt;package.deb&gt;  dpkg -p&lt;package.deb&gt;</span><br></pre></td></tr></table></figure>
<p>Recovery模式&nbsp;按e</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景：&quot;&gt;&lt;a href=&quot;#背景：&quot; class=&quot;headerlink&quot; title=&quot;背景：&quot;&gt;&lt;/a&gt;背景：&lt;/h3&gt;&lt;p&gt;双硬盘，双系统（SSD-&amp;gt;win8.1，HDD-&amp;gt;Ubuntu14.04），HDD是原笔记本的硬盘，只有320G，而且本
    
    </summary>
    
      <category term="Linux" scheme="mark.z-dd.net/categories/Linux/"/>
    
    
      <category term="Ubuntu" scheme="mark.z-dd.net/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Linux驱动系列?1.Misc(混杂)设备之GPIO</title>
    <link href="mark.z-dd.net/2014/12/12/Linux%E9%A9%B1%E5%8A%A8%E7%B3%BB%E5%88%97-1-Misc-%E6%B7%B7%E6%9D%82-%E8%AE%BE%E5%A4%87%E4%B9%8BGPIO/"/>
    <id>mark.z-dd.net/2014/12/12/Linux驱动系列-1-Misc-混杂-设备之GPIO/</id>
    <published>2014-12-12T13:23:15.000Z</published>
    <updated>2017-05-07T04:57:57.996Z</updated>
    
    <content type="html"><![CDATA[<p>## </p>
<h3 id="Misc设备-nbsp-–-nbsp-特殊的字符设备"><a href="#Misc设备-nbsp-–-nbsp-特殊的字符设备" class="headerlink" title="Misc设备&nbsp;–&nbsp;特殊的字符设备"></a>Misc设备&nbsp;–&nbsp;特殊的字符设备</h3><p>本质上仍然是字符设备，只是被增加了以层封装而已。Misc设备共享一个主设备号MISC_MAJOR（10），但次设备号不同（系统最多有255个杂项设备），所有的misc设备形成一个链表，对设备访问时内核根据次设备号查找对应的&nbsp;misc设备，然后调用其中的file_operations结构体中注册的文件操作接口进行操作，因此其驱动的主体工作还是file_operations的成员函数。</p>
<h4 id="1-字符设备模板及说明解析："><a href="#1-字符设备模板及说明解析：" class="headerlink" title="1.字符设备模板及说明解析："></a>1.字符设备模板及说明解析：</h4><p>1.<a href="http://blog.csdn.net/wdzxl198/article/details/8817147" target="_blank" rel="external">http://blog.csdn.net/wdzxl198/article/details/8817147</a>&nbsp;（自动创建设备节点）<br>2.<a href="http://blog.chinaunix.net/uid-20698426-id-136243.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-20698426-id-136243.html</a><br>主要是init函数(获取设备号，创建节点)&nbsp;，exit函数（回收操作），及设备操作集对应的操作函数。</p>
<h4 id="2-设备操作集file-operations结构体分析"><a href="#2-设备操作集file-operations结构体分析" class="headerlink" title="2.设备操作集file_operations结构体分析:"></a>2.设备操作集file_operations结构体分析:</h4><p><a href="http://www.linuxidc.com/Linux/2011-09/43530.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2011-09/43530.htm</a> </p>
<p>特别的异步IO轮询函数：<br>    unsigned int (<em>poll)(struct file </em>, struct poll_table_struct *);<br>(这是一个设备驱动中的轮询函数，第一个参数为file结构指针，第二个为轮询表指针）<br>这个函数返回设备资源的可获取状态，即POLLIN，POLLOUT，POLLPRI，POLLERR，POLLNVAL等宏的位“或”结果。<br>每个宏都表明设备的一种状态，如：POLLIN（定义为0x0001）意味着设备可以无阻塞的读，POLLOUT（定义为0x0004）意味着设备可以无阻塞的写。<br>(poll&nbsp;方法是&nbsp;3&nbsp;个系统调用的后端:&nbsp;poll,&nbsp;epoll,&nbsp;和&nbsp;select,&nbsp;都用作查询对一个或多个文件描述符的读或写是否会阻塞.<br>poll&nbsp;方法应当返回一个位掩码指示是否非阻塞的读或写是可能的,&nbsp;并且,&nbsp;可能地,&nbsp;提供给内核信息用来使调用进程睡眠直到&nbsp;I/O&nbsp;变为可能.<br>如果一个驱动的&nbsp;poll&nbsp;方法为&nbsp;NULL,&nbsp;设备假定为不阻塞地可读可写.<br>(这里通常将设备看作一个文件进行相关的操作，而轮询操作的取值直接关系到设备的响应情况，可以是阻塞操作结果，同时也可以是非阻塞操作结果）</p>
<h4 id="3-ioctl函数详解："><a href="#3-ioctl函数详解：" class="headerlink" title="3.ioctl函数详解："></a>3.ioctl函数详解：</h4><p><a href="http://blog.csdn.net/shanshanpt/article/details/19897897" target="_blank" rel="external">http://blog.csdn.net/shanshanpt/article/details/19897897</a> </p>
<p>ioctl函数的cmd：<br>cmd的大小为&nbsp;32位，共分&nbsp;4&nbsp;个域：<br>bit31~bit30&nbsp;2位为&nbsp;“区别读写”&nbsp;区，作用是区分是读取命令还是写入命令。<br>bit29~bit15&nbsp;14位为&nbsp;”数据大小”&nbsp;区，表示&nbsp;ioctl()&nbsp;中的&nbsp;arg&nbsp;变量传送的内存大小。<br>bit20~bit08&nbsp;&nbsp;8位为&nbsp;“魔数”(“幻数”)区，这个值用以与其它设备驱动程序的&nbsp;ioctl&nbsp;命令进行区别。<br>bit07~bit00&nbsp;&nbsp;&nbsp;8位为&nbsp;”区别序号”&nbsp;区，是区分命令的命令顺序序号。</p>
<p>这几个宏的使用格式为：</p>
<ul>
<li>_IO&nbsp;(魔数，&nbsp;基数);</li>
<li>_IOR&nbsp;(魔数，&nbsp;基数，&nbsp;变量型)</li>
<li>_IOW&nbsp;&nbsp;(魔数，&nbsp;基数，&nbsp;变量型)</li>
<li><p>_IOWR&nbsp;(魔数，&nbsp;基数，变量型&nbsp;)</p>
<p><strong>魔数&nbsp;(magic&nbsp;number)</strong><br>魔数范围为&nbsp;0~255&nbsp;。通常，用英文字符&nbsp;”A”&nbsp;~&nbsp;”Z”&nbsp;或者&nbsp;”a”&nbsp;~&nbsp;”z”&nbsp;来表示。设备驱动程序从传递进来的命令获取魔数，然后与自身处理的魔数想比较，如果相同则处理，不同则不处理。魔数是拒绝误使用的初步辅助状态。设备驱动&nbsp;程序可以通过&nbsp;_IOC_TYPE&nbsp;(cmd)&nbsp;来获取魔数。不同的设备驱动程序最好设置不同的魔数，但并不是要求绝对，也是可以使用其他设备驱动程序已用过的魔数。</p>
<p><strong>基(序列号)数</strong><br>基数用于区别各种命令。通常，从&nbsp;0开始递增，相同设备驱动程序上可以重复使用该值。例如，读取和写入命令中使用了相同的基数，设备驱动程序也能分辨出来，原因在于设备驱动程序区分命令时&nbsp;使用&nbsp;switch&nbsp;，且直接使用命令变量&nbsp;cmd值。创建命令的宏生成的值由多个域组合而成，所以即使是相同的基数，也会判断为不同的命令。设备驱动程序想要从命令中获取该基数，就使用下面的宏：<br>_IOC_NR&nbsp;(cmd)<br>通常，switch&nbsp;中的&nbsp;case&nbsp;值使用的是命令的本身。</p>
<p><strong>变量型</strong><br>变量型使用&nbsp;arg&nbsp;变量指定传送的数据大小，但是不直接代入输入，而是代入变量或者是变量的类型，原因是在使用宏创建命令，已经包含了&nbsp;sizeof()&nbsp;编译命令。</p>
<p>Linux内核中_IO,_IOR,_IOW,_IOWR宏的用法与解析：<a href="http://blog.csdn.net/hzn407487204/article/details/7995041" target="_blank" rel="external">http://blog.csdn.net/hzn407487204/article/details/7995041</a> </p>
</li>
</ul>
<h4 id="4-misc设备相关："><a href="#4-misc设备相关：" class="headerlink" title="4.misc设备相关："></a>4.misc设备相关：</h4><p><strong>misc设备结构体：</strong><br>struct&nbsp;miscdevice&nbsp;&nbsp;{<br>int&nbsp;minor;&nbsp;&nbsp;//次设备号，若为&nbsp;MISC_DYNAMIC_MINOR&nbsp;自动分配<br>const&nbsp;char&nbsp;<em>name;&nbsp;&nbsp;//设备名<br>const&nbsp;struct&nbsp;file_operations&nbsp;</em>fops;&nbsp;&nbsp;//设备文件操作结构体<br>struct&nbsp;list_head&nbsp;list;&nbsp;&nbsp;&nbsp;&nbsp;//misc_list链表头<br>struct&nbsp;device&nbsp;<em>parent;<br>struct&nbsp;device&nbsp;</em>this_device;</p>
<p>};</p>
<p><strong>misc设备注册和注销API：</strong><br>int&nbsp;misc_register(struct&nbsp;miscdevice&nbsp;<em>misc)<br>int&nbsp;misc_deregister(struct&nbsp;miscdevice&nbsp;</em>misc)</p>
<p><strong>misc设备驱动模型及实例解析：</strong><br>参考：<a href="http://blog.csdn.net/chenlong12580/article/details/7339127" target="_blank" rel="external">http://blog.csdn.net/chenlong12580/article/details/7339127</a> </p>
<h4 id="5-具体实例："><a href="#5-具体实例：" class="headerlink" title="5.具体实例："></a>5.具体实例：</h4><p>详见code文件夹</p>
<ul>
<li>输出</li>
<li>输入</li>
<li><p>中断</p>
<p>4步曲：<br>Step1：定义申明IO口，特别是管脚复用。<br>Step2：平台初始化时初始化对应IO。<br>Step3：创建编写对应的驱动代码&nbsp;C文件。<br>Step4：修改对应的Kconfig，Makefile文件，并配置加载编译。</p>
<p>中断参考：<br><a href="http://blog.csdn.net/mashang123456789/article/details/8623786" target="_blank" rel="external">http://blog.csdn.net/mashang123456789/article/details/8623786</a> </p>
<p>GPIO&nbsp;API:<br><a href="http://blog.sina.com.cn/s/blog_a6559d9201015vx9.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_a6559d9201015vx9.html</a> </p>
<p>与中断有关的API：<br>static&nbsp;inline&nbsp;int&nbsp;gpio_to_irq(unsigned&nbsp;gpio)</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;## &lt;/p&gt;
&lt;h3 id=&quot;Misc设备-nbsp-–-nbsp-特殊的字符设备&quot;&gt;&lt;a href=&quot;#Misc设备-nbsp-–-nbsp-特殊的字符设备&quot; class=&quot;headerlink&quot; title=&quot;Misc设备&amp;nbsp;–&amp;nbsp;特殊的字符设备&quot;&gt;&lt;
    
    </summary>
    
      <category term="Linux" scheme="mark.z-dd.net/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux系列--2.磁盘分区和Linux根文件系统,目录结构</title>
    <link href="mark.z-dd.net/2014/12/09/Linux%E7%B3%BB%E5%88%97-2-%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E5%92%8CLinux%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <id>mark.z-dd.net/2014/12/09/Linux系列-2-磁盘分区和Linux根文件系统-目录结构/</id>
    <published>2014-12-09T13:22:14.000Z</published>
    <updated>2017-05-07T05:03:18.791Z</updated>
    
    <content type="html"><![CDATA[<p>##DD初学Linux系列–2.磁盘分区和Linux文件系统,目录结构 #</p>
<pre><code>----------
</code></pre><p>来源：1.<a href=""><a href="http://linux-wiki.cn/wiki/zh-hans/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84" target="_blank" rel="external">http://linux-wiki.cn/wiki/zh-hans/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84</a></a><br>2.<a href="&quot;鸟哥的私房菜&quot;"><a href="http://vbird.dic.ksu.edu.tw/linux_basic/0130designlinux_2.php" target="_blank" rel="external">http://vbird.dic.ksu.edu.tw/linux_basic/0130designlinux_2.php</a></a></p>
<h4 id="一、根文件系统"><a href="#一、根文件系统" class="headerlink" title="一、根文件系统"></a>一、根文件系统</h4><p><strong>/bin</strong><br>这一目录中存放了供所有用户使用的完成基本维护任务的命令。其中bin是binary的缩写，表示二进制文件，通常为可执行文件。一些常用的系统命令，如cp、ls等保存在该目录中。</p>
<p><strong>/boot</strong><br>这里存放的是启动Linux时使用的一些核心文件。如操作系统内核、引导程序Grub等。</p>
<p><strong>/dev</strong><br>在此目录中包含所有的系统设备文件。从此目录可以访问各种系统设备。如CD-ROM，磁盘驱动器，调制解调器和内存等。在该目录中还包含有各种实用功能，如用于创建设备文件的MAKEDEV。</p>
<p><strong>/etc</strong><br>该目录中包含系统和应用软件的配置文件。</p>
<p><strong>/etc/passwd</strong><br>该目录中包含了系统中的用户描述信息，每行记录一个用户的信息。</p>
<p><strong>/home</strong><br>存储普通用户的个人文件。每个用户的主目录均在/home下以自己的用户名命名。</p>
<p><strong>/lib</strong><br>这个目录里存放着系统最基本的共享链接库和内核模块。共享链接库在功能上类似于Windows里的.dll文件。</p>
<p><strong>/lib64</strong><br>64位系统有这个文件夹，64位程序的库。</p>
<p><strong>/lost+found</strong><br>这并不是Linux目录结构的组成部分，而是ext3文件系统用于保存丢失文件的地方。不恰当的关机操作和磁盘错误均会导致文件丢失，这意味着这些被标注为“在使用”，但却并未列于磁盘上的数据结构上。正常情况下，引导进程会运行fsck程序，该程序能发现这些文件。除了“/”分区上的这个目录外，在每个分区上均有一个lost+found目录。</p>
<p><strong>/media</strong><br>可移动设备的挂载点，当前的操作系统通常会把U盘等设备自动挂载到该文件夹下。</p>
<p><strong>/mnt</strong><br>临时用于挂载文件系统的地方。一般情况下这个目录是空的，而在我们将要挂载分区时在这个目录下建立目录，再将我们将要访问的设备挂载在这个目录上，这样我们就可访问文件了。（注意在GNOME中，只有挂载到/media的文件夹才会显示在“计算机”中，挂载到/mnt不会做为特殊设备显示，详见自动挂载分区）</p>
<p><strong>/opt</strong><br>多数第三方软件默认安装到此位置，如Adobe Reader、google-earth等。并不是每个系统都会创建这个目录。</p>
<p><strong>/proc</strong><br>它是存在于内存中的虚拟文件系统。里面保存了内核和进程的状态信息。多为文本文件，可以直接查看。如/proc/cpuinfo保存了有关CPU的信息。</p>
<p><strong>/root</strong><br>这是根用户的主目录。与保留给个人用户的/home下的目录很相似，该目录中还包含仅与根用户有关的条目。</p>
<p><strong>/sbin</strong><br>供超级用户使用的可执行文件，里面多是系统管理命令，如fsck, reboot, shutdown, ifconfig等。</p>
<p><strong>/tmp</strong><br>该目录用以保存临时文件。该目录具有Sticky特殊权限，所有用户都可以在这个目录中创建、编辑文件。但只有文件拥有者才能删除文件。为了加快临时文件的访问速度，有的实现把/tmp放在内存中。</p>
<p><strong>/usr</strong><br>静态的用户级应用程序等，见下。</p>
<p><strong>/var</strong><br>动态的程序数据等，见下文。<br>    var中包括了一些数据文件，如系统日志等。/var的存放使得/usr被只读挂载成为可能。</p>
<pre><code>**## /var目录结构 ##**
**/var/cache**
应用程序的缓存文件
**/var/lib**
应用程序的信息、数据。如数据库的数据等都存放在此文件夹。
**/var/local**
/usr/local中程序的信息、数据
**/var/lock**
锁文件
**/var/log**
日志文件
**/var/opt**
/opt中程序的信息、数据
**/var/run**
正在执行着的程序的信息，如PID文件应存放于此
**/var/spool**
存放程序的假脱机数据（即spool data）
**/var/tmp**
临时文件
</code></pre><h4 id="二、所以分区："><a href="#二、所以分区：" class="headerlink" title="二、所以分区："></a>二、所以分区：</h4><p>使用任何Linux系统，都要有至少两个分区：一个根分区，用“/”表示；另一个是swap（交换）分区（最小应该和内存一样大，最大一般不超过内存的两倍大小），最好把/boot单独创建一个分区上（200M左右）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##DD初学Linux系列–2.磁盘分区和Linux文件系统,目录结构 #&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;----------
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;来源：1.&lt;a href=&quot;&quot;&gt;&lt;a href=&quot;http://linux-wiki.cn/wiki/zh-han
    
    </summary>
    
      <category term="Linux" scheme="mark.z-dd.net/categories/Linux/"/>
    
    
      <category term="根文件系统" scheme="mark.z-dd.net/tags/%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>开源许可-略知一二</title>
    <link href="mark.z-dd.net/2014/10/29/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF-%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C/"/>
    <id>mark.z-dd.net/2014/10/29/开源许可-略知一二/</id>
    <published>2014-10-29T13:55:27.000Z</published>
    <updated>2017-05-07T05:03:47.941Z</updated>
    
    <content type="html"><![CDATA[<p>很早就开始关注些开源项目，加上这段时间在学习linux的相关东西，毕竟商用与学习是不一样的，所以就不得不全面了解下开源许可了。在此Mark一下。</p>
<p>找了下度娘，搜到一篇很全的说明：<a href="http://blog.csdn.net/techbirds_bao/article/details/8785413" target="_blank" rel="external">http://blog.csdn.net/techbirds_bao/article/details/8785413</a>。</p>
<p>今天看到了一个开源IM工具，是蘑菇街的—<a href="https://github.com/mogutt" target="_blank" rel="external">mogutt</a>，它是基于Apache Licence V2.0的。对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售</p>
<p>现在也想学习下QT5，它的开源版本是基于LGPL的。商业软件可以使用，但不能修改LGPL协议的代码，只能使用类库引用。</p>
<p>Linux本身是基于GPL的。商业软件不能使用GPL协议的代码</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早就开始关注些开源项目，加上这段时间在学习linux的相关东西，毕竟商用与学习是不一样的，所以就不得不全面了解下开源许可了。在此Mark一下。&lt;/p&gt;
&lt;p&gt;找了下度娘，搜到一篇很全的说明：&lt;a href=&quot;http://blog.csdn.net/techbirds_b
    
    </summary>
    
      <category term="Open Source" scheme="mark.z-dd.net/categories/Open-Source/"/>
    
    
      <category term="开源许可" scheme="mark.z-dd.net/tags/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF/"/>
    
  </entry>
  
  <entry>
    <title>与SSI的初遇</title>
    <link href="mark.z-dd.net/2014/10/23/%E4%B8%8ESSI%E7%9A%84%E5%88%9D%E9%81%87/"/>
    <id>mark.z-dd.net/2014/10/23/与SSI的初遇/</id>
    <published>2014-10-23T14:01:38.000Z</published>
    <updated>2017-05-07T05:04:59.047Z</updated>
    
    <content type="html"><![CDATA[<p>之前只弄过CGI，今天接触了下SSI（Lwip里httpd的）。</p>
<p>首先补充了下基础知识（来源于网络）：</p>
<p><code>SSI :Server Side Include，是一种类似于ASP的基于服务器的网页制作技术。SSI 具有强大的功能，只要使用一条简单的SSI 命令就可以实现整个网站的内容更新，动态显示时间和日期，以及执行shell和CGI脚本程序等复杂的功能。将内容发送到浏览器之前，可以使用“服务器端包含 (SSI）”指令将文本、图形或应用程序信息包含到网页中。默认扩展名是 .stm、.shtm 和 .shtml。</code></p>
<blockquote>
<p>在Lwip里的httpd中，工作原理：LWIP对于.shtml,.ssi,.shtm后缀的文件，会检测文件中&lt;!–#name–&gt;格式的TAG标志。</p>
<p>然后再这个标记后面添加你想要的字符串。并不是替换，不过这个方法在脚本中不行， &lt;!–#name–&gt;</p>
<p>是html文件的注释，但是在 &lt;script&gt;…&lt;/script&gt;中就不是注释了，所以在添加js代码的时候必须把整个JS脚本添加进来。</p>
</blockquote>
<p>对于SSI使用详解 可移步至：<a href="http://www.dedecms.com/web-art/PHP_jiaocheng/20010528/31257.html" target="_blank" rel="external">http://www.dedecms.com/web-art/PHP_jiaocheng/20010528/31257.html</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前只弄过CGI，今天接触了下SSI（Lwip里httpd的）。&lt;/p&gt;
&lt;p&gt;首先补充了下基础知识（来源于网络）：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SSI :Server Side Include，是一种类似于ASP的基于服务器的网页制作技术。SSI 具有强大的功能，只要使用一
    
    </summary>
    
      <category term="Network" scheme="mark.z-dd.net/categories/Network/"/>
    
    
      <category term="网络" scheme="mark.z-dd.net/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="lwip" scheme="mark.z-dd.net/tags/lwip/"/>
    
      <category term="SSI" scheme="mark.z-dd.net/tags/SSI/"/>
    
  </entry>
  
</feed>
